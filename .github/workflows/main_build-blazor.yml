# Migrating this workflow to Azure DevOps example. 
# For Docker guidance, see a more robust example that builds AND publishes an image to Dockerhub:
# https://github.com/LanceMcCarthy/DevOpsExamples/blob/main/.github/workflows/main_build-aspnetcore.yml
name: Build Blazor Application

on:
  workflow_dispatch:
    inputs:
    logLevel:
      description: 'Log level'
      required: true
      default: 'warning'
      type: choice
      options:
      - info
      - warning
      - debug
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'src/Blazor/**/*'
  #     - '.github/workflows/main_build-blazor.yml' 

jobs:
##############################
####### WINDOWS BUILD ########
##############################
  build_blazor_windows:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore NuGet Packages
      run: |
        # In this special case, we're using the nested nuget.config file (instead of src/nuget.config)
        dotnet restore src\Blazor\MyBlazorApp\MyBlazorApp.csproj --configfile src\Blazor\MyBlazorApp\NuGet.Config --runtime win-x64
        dotnet restore src\Blazor\MyBlazorApp.Tests\MyBlazorApp.Tests.csproj --configfile src\Blazor\MyBlazorApp\NuGet.Config --runtime win-x64
      env:
        TELERIK_USERNAME: ${{ secrets.MyTelerikAccountUsername }}
        TELERIK_PASSWORD: ${{ secrets.MyTelerikAccountPassword }}

    - name: Build Blazor Project
      run: dotnet build src\Blazor\MyBlazorApp\MyBlazorApp.csproj --no-restore --configuration Release --runtime win-x64

    - name: Build Test Project
      run: dotnet build src\Blazor\MyBlazorApp.Tests\MyBlazorApp.Tests.csproj --no-restore --configuration Release --runtime win-x64

    - name: Run Tests
      run: dotnet test src\Blazor\MyBlazorApp.Tests\MyBlazorApp.Tests.csproj --runtime win-x64

##############################
####### DOCKER BUILD #########
##############################
  build_blazor_docker:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Using GitHub Actions secrets, we can pass in the Telerik NuGet key to be mounted in the Dockerfile's commands
    # NOTE: this demo does not push to Dockerhub. 
    # For a real world exapmple, see the ASP.NET Core Workflow at ~/.github/workflows/main_build-aspnetcore.yml
    - name: Build Docker
      uses: docker/build-push-action@v3
      with:
        context: src/Blazor/MyBlazorApp
        push: false
        secrets: |
          telerik_key=${{ secrets.TELERIK_NUGET_KEY }}
        tags: |
          lancemccarthy/myblazorapp:latest
