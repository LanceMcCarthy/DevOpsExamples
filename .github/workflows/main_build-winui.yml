name: WinUI3

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - "winui/*"
    paths:
      - 'src/WinUI/**/*'
      - '.github/workflows/main_build-winui.yml' 

env:
  TELERIK_USERNAME: "api-key" # Used by the nuget.config file
  TELERIK_PASSWORD: ${{secrets.TELERIK_NUGET_KEY}} # Used by the nuget.config file
  TELERIK_LICENSE: ${{secrets.TELERIK_LICENSE_KEY}} # Used when compiling the project
  SOLUTION_NAME: "src/WinUI/MyDemo.sln"
  NUGETCONFIG_PATH: "src/NuGet.Config"
  PFX_FILENAME: "MyCodeSignCert.pfx"
  PFX_PASSWORD: ${{secrets.PFX_PASSWORD}}

jobs:
  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, arm64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      shell: pwsh
      run: dotnet restore ${{env.SOLUTION_NAME}} --configfile ${{env.NUGETCONFIG_PATH}}

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore RIDs
      run: msbuild ${{env.SOLUTION_NAME}} /t:Restore /p:Configuration=${{matrix.configuration}}

    - name: Decode and save the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{secrets.BASE64_ENCODED_PFX}}")
        $certificatePath = "${{env.PFX_FILENAME}}"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Build and Create MSIX
      run: msbuild ${{env.SOLUTION_NAME}} /p:Configuration=${{matrix.configuration}} /p:Platform=${{matrix.platform}} /p:UapAppxPackageBuildMode=${{env.APPX_PACKAGE_BUILD_MODE}} /p:AppxBundle=${{env.APPX_BUNDLE}} /p:PackageCertificateKeyFile="${{env.PFX_FILENAME}}" /p:PackageCertificatePassword=${{env.PFX_PASSWORD}} /p:AppxPackageDir="${{env.APPX_PACKAGE_DIR}}" /p:GenerateAppxPackageOnBuild=${{env.GENERATE_MSIX}} /p:AppxPackageSigningEnabled=${{env.APPX_SIGNING}}
      env:
        GENERATE_MSIX: true
        APPX_BUNDLE: Never
        APPX_SIGNING: true
        APPX_PACKAGE_BUILD_MODE: SideloadOnly
        APPX_PACKAGE_DIR: Packages\

    # Delete the pfx file
    - name: Remove the pfx
      run: Remove-Item -path ${{env.PFX_FILENAME}}
