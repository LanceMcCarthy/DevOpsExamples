name: Build Console App

on:
  push:
    branches:
      - main
    paths:
      - 'src/Console/**/*'
      - '.github/workflows/main_build-console.yml' 

jobs:
  # A job that builds a .NET Core console application using Telerik Document Processing Libraries 
  # It uses a Windows runner and builds for Any CPU
  build_console:
    runs-on: ubuntu-latest
    # REQUIRED for 'fetch-secrets' job
    permissions:
      id-token: write
      contents: read
    env:
      RID: win-x64
      CSPROJ_PATH: src/Console/MyDocProcApp/MyDocProcApp.csproj
      NUGETCONFIG_PATH: src/NuGet.Config
      BUILD_CONFIGURATION: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Fetch secrets from AKeyless
      id: fetch-secrets
      uses: cmancone/akeyless-action@v1
      with:
        access-id: ${{ secrets.AKEYLESS_JWT_ID }}
        static-secrets: '{"/personal-keys/mccarthy/TELERIK_NUGET_KEY":"MY_TELERIK_NUGET_KEY"}'
        export-secrets-to-outputs: true
        export-secrets-to-environment: true

    - name: Update NuGet Package Sources
      run: |
        # This example uses our NuGet Key approach instead of username and password, see my blog post for more information https://www.telerik.com/blogs/announcing-nuget-keys

        # STEP 1 - The 'update source' command will look in the nuget.config file for the 'Telerik' source and update its credentials using the 'api-key'
        dotnet nuget update source 'Telerik' --source 'https://nuget.telerik.com/v3/index.json' --username 'api-key' --password '${{ steps.fetch-secrets.outputs.MY_TELERIK_NUGET_KEY }}' --store-password-in-clear-text --configfile 'src/nuget.config'

        # STEP 2 - now we can use the 'restore' command
        dotnet restore ${{ env.CSPROJ_PATH }} --configfile ${{ env.NUGETCONFIG_PATH }} --runtime ${{ env.RID }}
    
    - name: Build Solution
      run: dotnet build ${{ env.CSPROJ_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --runtime ${{ env.RID }} --no-restore


    #-----  SBOM generation (Software Bill of Materials) -----#
    - name: Generate SBOM
      run: |
        curl -Lo $RUNNER_TEMP/sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64
        chmod +x $RUNNER_TEMP/sbom-tool
        $RUNNER_TEMP/sbom-tool generate -b src/Console/MyDocProcApp/bin/Release/net6.0/ -bc src/Console/MyDocProcApp/ -pn MyDocProcApp -pv 1.0.0 -nsb https://sbom.dvlup.com -V Verbose
        ls src/Console/MyDocProcApp/bin/Release/net6.0/_manifest/spdx_2.2/
        cat src/Console/MyDocProcApp/bin/Release/net6.0/_manifest/spdx_2.2/manifest.spdx.json
        
    - name: Upload SBOM Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        path: src/Console/MyDocProcApp/bin/Release/net6.0/_manifest/spdx_2.2/
        name: 'SBOM Artifact'
        
