# Triggers are used to determine when this pipeline is run
trigger:
  batch: true
  branches:
    include:
    - main
    exclude:
    - dev

# The pool is the VM that is being use to run the tasks on.
pool:
  vmImage: 'windows-2022'

# In the variables section, you can define a variable for values are the are frequently reused
variables:
  consoleNugetConfigPath: 'src/nuget.config'
  consoleProjectPath: 'src/Console/MyDocProcApp/MyDocProcApp.csproj'
  buildConfiguration: 'Debug'

steps:

# Step 1. Restore the NuGet packges
# IMPORTANT - This task is the key part where you get the packages from the private feed (as well as NuGet.org)
- task: DotNetCoreCLI@2
  displayName: 'NuGet restore MyDocProcApp'
  inputs:
    command: 'restore'
    projects: $(consoleProjectPath)
    feedsToUse: 'config'
    nugetConfigPath: $(consoleNugetConfigPath)
    externalFeedCredentials: 'TelerikFeed'

# Step 2. Build the project
- task: DotNetCoreCLI@2
  displayName: 'Build MyDocProcApp'
  inputs:
    command: 'build'
    projects: $(consoleProjectPath)
    configuration: $(buildConfiguration)

# Step 3. Publish
- task: DotNetCoreCLI@2
  displayName: 'Publish MyDocProcApp'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: $(consoleProjectPath)

# Step 4. upload the pipeline's artifacts (this means the result of any build)
#- task: PublishBuildArtifacts@1
#  displayName: 'Publish pipeline artifacts'
#  inputs:
#    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#    ArtifactName: 'ConsoleDrop'
#    publishLocation: 'Container'