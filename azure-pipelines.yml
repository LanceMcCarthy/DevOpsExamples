trigger:
  branches:
    include:
    - main
  # To avoid uneccessary builds, I am manually triggering a pipeline run. In a real scenario, you would set the path trigger to the code folder
  # paths:
  #  include:
  #    - 'azure-pipelines.yml'
  #    - 'src/Kendo/angular_demo/**/*'
  #    - 'src/Console/**/*'
  #    - 'src/Ajax/**/*'
  #    - 'src/Blazor/**/*'
  #    - 'src/AspNetCore/**/*'

variables:
  DOTNET_SDK_VERSION: '9.0.x'
  buildConfiguration: 'Release'
  nugetConfigPath: 'src/NuGet.Config'
  consoleProjectPath: 'src/Console/MyDocProcApp/MyDocProcApp.csproj'
  ajaxProjectPath: 'src/Ajax/MySite.sln'
  blazorProjectPath: 'src/Blazor/MyBlazorApp.sln'
  aspnetProjectPath: 'src/AspNetCore/MyAspNetCoreApp.sln'
  winuiProjectPath: 'src/WinUI/MyDemo.sln'
  # Pipeline variables, set using the AzDO yaml editor at dev.azure.com
  # AKEYLESS_ACCESS_ID
  # MY_TELERIK_NUGET_KEY
  # MY_TELERIK_LICENSE_KEY

jobs:
# *************************************************************** #
# *                 KENDO ANGULAR (env var)                     * #
# *************************************************************** #
- job: BuildAngularAppWithVariables
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  # Handle dependencies
  - powershell: |
      # 1. Clean the angular cache, to avoid using any expired keys
      rm -rf .angular/cache

      # 2. Install your project dependencies
      npm install

      # 2.b - If you don't already have the @progress/kendo-licensing dependency, you can add it now.
      # npm install --save @progress/kendo-licensing;
    workingDirectory: "src/Kendo/angular_demo"
    displayName: "Install dependencies"

  # Activate the license using the environment variable.
  - powershell: npx kendo-ui-license activate
    workingDirectory: "src/Kendo/angular_demo"
    displayName: "Activate license"
    env:
      TELERIK_LICENSE: $(MY_TELERIK_LICENSE_KEY)

  # Build the project
  - powershell: npm run build
    workingDirectory: "src/Kendo/angular_demo"
    displayName: "Build project"

# *************************************************************** #
# *               KENDO ANGULAR (secure file)                   * #
# *************************************************************** #
- job: BuildAngularAppWithSecureFile
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  # Download the license key file (this MUST have a 'name' so it can be referenced later).
  - task: DownloadSecureFile@1
    name: DownloadTelerikLicenseFile
    displayName: 'Download SecureFile'
    inputs:
      secureFile: 'telerik-license.txt'

  # Handle dependencies
  - powershell: |
      # 1. Clean the angular cache, to avoid using any expired keys
      rm -rf .angular/cache

      # 2. Install your project dependencies
      npm install

      # 2.b - If you don't already have the @progress/kendo-licensing dependency, you can add it now.
      # npm install --save @progress/kendo-licensing;
    workingDirectory: "src/Kendo/angular_demo"
    displayName: "Install dependencies"

  # Activate the license using the secure file downloaded above.
  - powershell: npx kendo-ui-license activate
    workingDirectory: "src/Kendo/angular_demo"
    displayName: "Activate license"
    env:
      TELERIK_LICENSE_PATH: $(DownloadTelerikLicenseFile.secureFilePath)
    
  # Build the project
  - powershell: npm run build
    workingDirectory: "src/Kendo/angular_demo"
    displayName: "Build project"


# *************************************************************** #
# *              CONSOLE (uses Akeyless secrets)                * #
# *************************************************************** #
- job: BuildConsoleApp_Akeyless
  pool:
    vmImage: 'windows-latest'
  steps:
  # Get an authentication token from Azure so we can authenticate with Akeyless
  - task: AzureCLI@2
    name: 'AzureCLI'
    displayName: 'Get JWT from Azure Service Principal'
    inputs:
      azureSubscription: 'Azure MSA Account'
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        $JWT=$(az account get-access-token --query accessToken --output tsv)
        echo "##vso[task.setvariable variable=azure_jwt;isoutput=true;issecret=true]$JWT"
  
  # Uses LanceMcCarthy/akeyless-extension-azdo to pull down static secret (also works for dynamic secrets)
  # Needs a JWT see https://github.com/LanceMcCarthy/akeyless-extension-azdo/blob/main/docs/getting-started.md
  - task: akeyless-secrets@1
    name: 'Akeyless1'
    displayName: 'Get Secrets from Akeyless'
    inputs:
      accessid: '$(AKEYLESS_ACCESS_ID)' # Stored as pipeline variable
      azureJwt: '$(AzureCLI.azure_jwt)' # Output variable fomr the previous step
      staticSecrets: '{"/personal-keys/mccarthy/TELERIK_NUGET_KEY":"NUGET_KEY"}'

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_SDK_VERSION)

  - powershell: dotnet nuget update source 'Telerik_v3_Feed' --source 'https://nuget.telerik.com/v3/index.json' --username 'api-key' --password '$(Akeyless1.NUGET_KEY)' --configfile $(nugetConfigPath) --store-password-in-clear-text
    displayName: 'Update package source credentials'
  
  - powershell: dotnet restore $(consoleProjectPath) --configfile $(nugetConfigPath)
    displayName: 'restore packages'
  
  - powershell: dotnet publish $(consoleProjectPath) -o /app/publish /p:UseAppHost=false --no-restore
    displayName: 'Publish the project'
    env:
      TELERIK_LICENSE: $(MY_TELERIK_LICENSE_KEY) # AzDO pipeline secret variable


# *************************************************************** #
# *              CONSOLE (uses Service connection)              * #
# *************************************************************** #
- job: BuildConsoleApp_ServiceConnection
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_SDK_VERSION)

  # Using Service connection for credentials
  - task: DotNetCoreCLI@2
    displayName: 'NuGet restore MyDocProcApp'
    inputs:
      command: 'restore'
      projects: $(consoleProjectPath)
      feedsToUse: 'config'
      nugetConfigPath: $(nugetConfigPath)
      externalFeedCredentials: 'Telerik_v3'

  # Build the project
  - task: DotNetCoreCLI@2
    displayName: 'Build MyDocProcApp'
    inputs:
      command: 'build'
      projects: $(consoleProjectPath)
      configuration: $(buildConfiguration)
    env:
      TELERIK_LICENSE: $(MY_TELERIK_LICENSE_KEY) # AzDO pipeline secret variable


# ************************************************************* #
# *                         BLAZOR                            * #
# ************************************************************* #
- job: BuildBlazorApp
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_SDK_VERSION)

  - powershell: dotnet nuget update source 'Telerik_v3_Feed' -s 'https://nuget.telerik.com/v3/index.json' -u 'api-key' -p '$(MY_TELERIK_NUGET_KEY)' --store-password-in-clear-text --configfile $(nugetConfigPath)
    displayName: 'Update Package Source Credentials'

  - powershell: dotnet restore $(blazorProjectPath) --configfile $(nugetConfigPath)
    displayName: 'Restore NuGet Packages'

  - powershell: dotnet build $(blazorProjectPath) --no-restore
    displayName: 'Build and publish'
    env:
      TELERIK_LICENSE: $(MY_TELERIK_LICENSE_KEY) # AzDO pipeline secret variable
 

# ************************************************************* #
# *                       ASPNET Core                         * #
# ************************************************************* #
- job: BuildAspNetCoreApp
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_SDK_VERSION)

  - powershell: dotnet nuget update source 'Telerik_v3_Feed' -s 'https://nuget.telerik.com/v3/index.json' -u 'api-key' -p '$(MY_TELERIK_NUGET_KEY)' --store-password-in-clear-text --configfile $(nugetConfigPath)
    displayName: 'Update Package Source Credentials'

  - powershell: dotnet restore $(aspnetProjectPath) --configfile $(nugetConfigPath)
    displayName: 'Restore NuGet Packages'
    
  - powershell: dotnet build $(aspnetProjectPath) --no-restore
    displayName: 'Build the project'
    env:
      TELERIK_LICENSE: $(MY_TELERIK_LICENSE_KEY) # AzDO pipeline secret variable


# *************************************************************** #
# *          ASP.NET AJAX (.NET Framework - SecureFile)         * #
# *************************************************************** #
- job: BuildAjaxApp
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: DownloadSecureFile@1
    name: DownloadTelerikLicenseFile  # Note 1: Make sure a name value is set, it's referenced later.
    displayName: 'Download Telerik License Key File'
    inputs:
      secureFile: 'telerik-license.txt'

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet.exe'
    inputs:
      versionSpec: '4.x'

  # Use nuget.exe to update the credentials of the 'Telerik_v3_Feed' source defined in the nuget.config
  - task: PowerShell@2
    displayName: 'Set Package Source Credentials'
    inputs:
      targetType: 'inline'
      script: nuget sources update -Name 'Telerik_v3_Feed' -Source 'https://nuget.telerik.com/v3/index.json' -Username 'api-key' -Password '$(MY_TELERIK_NUGET_KEY)' -ConfigFile '$(nugetConfigPath)' -StorePasswordInClearText

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      restoreSolution: $(ajaxProjectPath)
      feedsToUse: config
      nugetConfigPath: $(nugetConfigPath)
      externalFeedCredentials: 'Telerik_v3'

  - task: MSBuild@1
    displayName: 'Build AJAX Project'
    inputs:
      solution: '$(ajaxProjectPath)'
      platform: Any CPU
      configuration: Release
      msbuildArguments: '/p:RestorePackages=true'
    env:
      TELERIK_LICENSE_PATH: $(DownloadTelerikLicenseFile.secureFilePath) # Note 2: We use the name to reference the secureFilePath value


# ************************************************************* #
# *                         WinUI 3                           * #
# ************************************************************* #
- job: BuildWinUI
  pool:
    vmImage: 'windows-latest'
  variables:
    group: 'KeyVaultVariables'
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_SDK_VERSION)

  - powershell: dotnet nuget update source 'Telerik_v3_Feed' -s 'https://nuget.telerik.com/v3/index.json' -u 'api-key' -p '$(MY_TELERIK_NUGET_KEY)' --store-password-in-clear-text --configfile $(nugetConfigPath)
    displayName: 'Update Package Source Credentials'

  - powershell: dotnet restore $(winuiProjectPath) --configfile $(nugetConfigPath)
    displayName: 'Restore NuGet Packages'

  - powershell: msbuild $(winuiProjectPath) /t:Restore /p:Configuration=Release /p:RestorePackages=true /p:RestoreRIDs=true /p:RestoreProjectStyle=PackageReference
    displayName: 'Restore RIDs'

  - task: DownloadSecureFile@1
    name: PfxDownloadStep
    displayName: 'Download PFX'
    inputs:
      secureFile: 'Lancelot Software, LLC.pfx'

  - powershell: |
      msbuild $(winuiProjectPath) /p:Configuration=Release `
        /p:Platform=$(BUILD_PLATFORM) `
        /p:AppxBundlePlatforms=$(BUNDLE_PLATFORMS) `
        /p:AppxPackageSigningEnabled=$(MSIX_SIGNING_ENABLED) `
        /p:AppxPackageDir=$(MSIX_PACKAGE_DIR) `
        /p:AppxBundleBuildMode=$(MSIX_BUILDMODE)`
        /p:AppxBundle=$(MSIX_BUNDLE) `
        /p:AppxBundleDir=$(MSIX_PACKAGE_DIR) `
        /p:GenerateAppxPackageOnBuild=$(MSIX_GENERATE_PACKAGE) `
        /p:PackageCertificateKeyFile=$(PFX_FILE_PATH) `
        /p:PackageCertificatePassword=$(PFX_PASSWORD) `
        /p:PackageCertificateThumbprint=$(PFX_THUMBPRINT) `
        /p:UapAppxPackageBuildMode=$(MSIX_BUILDMODE)
    displayName: Build and Create MSIX
    env:
      PFX_FILE_PATH: $(PfxDownloadStep.secureFilePath) # Reference the secureFilePath value
      PFX_PASSWORD: $(LancelotSoftwarePfx2023Password) # From KeyVault
      PFX_THUMBPRINT: $(LancelotSoftwarePfx2023Thumbprint) # From KeyVault
      TELERIK_LICENSE: $(TelerikLicenseKey) # From KeyVault
      MSIX_GENERATE_PACKAGE: true
      MSIX_SIGNING_ENABLED: true
      MSIX_BUILDMODE: CI # only generates msix package, skips test subfolders
      MSIX_PACKAGE_DIR: Packages
      MSIX_BUNDLE: Always
      BUILD_PLATFORM: x64
      BUNDLE_PLATFORMS: x64|arm64|x86


