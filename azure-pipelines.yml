trigger:
  branches:
    include:
    - main
  paths:
   include:
     - 'azure-pipelines.yml'
     - 'src/Console/**/*'
#     - 'src/Ajax/**/*'
#     - 'src/Blazor/**/*'
#     - 'src/Uwp/**/*'

jobs:
# *************************************************************** #
# *           EXAMPLE - Uses Akeyless for credentials -         * #
# *************************************************************** #
- job: BuildConsoleApp
  pool:
    vmImage: 'windows-2022'
  variables:
    consoleNugetConfigPath: 'src/nuget.config'
    consoleProjectPath: 'src/Console/MyDocProcApp/MyDocProcApp.csproj'

  steps:
  - task: AzureCLI@2
    name: 'AzureCLI'
    displayName: 'Get JWT from Azure Service Principal'
    inputs:
      azureSubscription: 'Azure MSA Account'
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        # Get a JWT using the azure CLI
        $JWT=$(az account get-access-token --query accessToken --output tsv)

        # Set an output variable
        echo "##vso[task.setvariable variable=azure_jwt;isoutput=true;issecret=true]$JWT"
  
  # Needs JWT, see https://github.com/LanceMcCarthy/akeyless-extension-azdo/blob/main/docs/getting-started.md
  - task: akeyless-secrets@1
    name: 'Akeyless1'
    displayName: 'Get Secrets from Akeyless'
    inputs:
      accessid: '$(AKEYLESS_ACCESS_ID)'
      azureJwt: '$(AzureCLI.azure_jwt)'
      staticSecrets: '{"/personal-keys/mccarthy/TELERIK_NUGET_KEY":"NUGET_KEY"}'

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.0.x'

  - powershell: dotnet nuget update source 'Telerik' --source 'https://nuget.telerik.com/v3/index.json' --username 'api-key' --password '$(Akeyless1.NUGET_KEY)' --configfile $(consoleNugetConfigPath) --store-password-in-clear-text
    displayName: 'Update package source credentials'
  
  - powershell: dotnet restore $(consoleProjectPath) --configfile $(consoleNugetConfigPath)
    displayName: 'restore packages'
  
  - powershell: dotnet publish $(consoleProjectPath) -o /app/publish /p:UseAppHost=false --no-restore
    displayName: 'Publish the project'


# *************************************************************** #
# *                  EXAMPLE - CONSOLE (.NET)                   * #
# *                                                             * #
# *         -Uses Service Principal for credentials-            * #
# *************************************************************** #
# - job: BuildConsoleApp
#   pool:
#     vmImage: 'windows-2022'

#   variables:
#   - group: KeyVaultVariables
#   - name: consoleNugetConfigPath
#     value: 'src/nuget.config'
#   - name: consoleProjectPath
#     value: 'src/Console/MyDocProcApp/MyDocProcApp.csproj'
#   - name: buildConfiguration
#     value: 'Debug'

#   steps:
#   - task: UseDotNet@2
#     inputs:
#       packageType: 'sdk'
#       version: '8.0.x'

#   # Restore the NuGet packges using Service connection for credentials
#   - task: DotNetCoreCLI@2
#     displayName: 'NuGet restore MyDocProcApp'
#     inputs:
#       command: 'restore'
#       projects: $(consoleProjectPath)
#       feedsToUse: 'config'
#       nugetConfigPath: $(consoleNugetConfigPath)
#       externalFeedCredentials: 'TelerikFeed'

#   # Build the project
#   - task: DotNetCoreCLI@2
#     displayName: 'Build MyDocProcApp'
#     inputs:
#       command: 'build'
#       projects: $(consoleProjectPath)
#       configuration: $(buildConfiguration)

# *************************************************************** #
# *         EXAMPLE   - ASP.NET AJAX (.NET Framework)           * #
# *                                                             * #
# *       -Update package source with pipeline secrets-         * #
# *************************************************************** #
# - job: BuildWebformsApp
#   pool:
#     vmImage: 'windows-2022'
#   variables:
#     nugetConfigPath: 'src\nuget.config'
#     projectPath: 'src\Ajax\MySite.sln'

#   steps:
#   - task: NuGetToolInstaller@1
#     displayName: 'Use NuGet '

#   # Step 1. Using nuget.exe, set the credentials of the 'Telerik' source in the nuget.config (using pipeline secrets)
#   - task: PowerShell@2
#     displayName: 'Update Package Source Credentials'
#     inputs:
#       targetType: 'inline'
#       script: nuget sources update -Name 'Telerik' -Source 'https://nuget.telerik.com/v3/index.json' -Username '$(MY_TELERIK_EMAIL)' -Password '$(MY_TELERIK_PASSWORD)' -ConfigFile '$(nugetConfigPath)' -StorePasswordInClearText

#   # Step 2. Using nuget.exe, restore the NuGet packages
#   - task: PowerShell@2
#     displayName: 'Restore NuGet Packages'
#     inputs:
#       targetType: 'inline'
#       script: nuget restore '$(projectPath)' -ConfigFile '$(nugetConfigPath)'

#   # Step 3. Build the project without restoring packages automatically
#   - task: MSBuild@1
#     displayName: 'Build AJAX Project'
#     inputs:
#       solution: '$(projectPath)'
#       platform: Any CPU
#       configuration: Release
#       msbuildArguments: '/p:RestorePackages=false'


# ************************************************************* #
# *                 EXAMPLE 3 - BLAZOR                        * #
# *                                                           * #
# *        -Update package source with KeyVault secrets-      * #
# ************************************************************* #
# - job: BuildBlazorApp
#   pool:
#     vmImage: 'windows-2022'
#   variables:
#     nugetConfigPath: 'src\Blazor\MyBlazorApp\NuGet.Config'
#     projectPath: 'src\Blazor\MyBlazorApp\MyBlazorApp.csproj'
  
#   steps:
#   - task: UseDotNet@2
#     inputs:
#       packageType: 'sdk'
#       version: '8.0.x'
  
#   # Step 1. Using dotnet CLI, set the credentials of the 'Telerik_Feed', defined in the nuget.config
#   - task: PowerShell@2
#     displayName: 'Update Package Source Credentials'
#     inputs:
#       targetType: 'inline'
#       script: dotnet nuget update source 'Telerik_Feed' -s 'https://nuget.telerik.com/v3/index.json' -u '$(MY_TELERIK_EMAIL)' -p '$(MY_TELERIK_PASSWORD)' --store-password-in-clear-text --configfile $(nugetConfigPath)

#   # Step 2. Using dotnet CLI, restore NuGet packages
#   - task: PowerShell@2
#     displayName: 'Restore NuGet Packages'
#     inputs:
#       targetType: 'inline'
#       script: dotnet restore $(projectPath) --configfile $(nugetConfigPath) --runtime win-x64

#   # Step 3. Build the project
#   - task: DotNetCoreCLI@2
#     displayName: 'Build Blazor Project'
#     inputs:
#       command: 'build'
#       projects: $(projectPath)
#       configuration: Debug


# *************************************************************** #
# *                   EXAMPLE 4 - UWP (WinRT)                   * #
# *                                                             * #
# *         -Uses Service Principal for credentials-            * #
# *************************************************************** #
# - job: BuildUwpApp
#   pool:
#     vmImage: 'windows-2022'
  
#   variables:
#     solution: 'src/Uwp/SalesDashboard.UWP.sln'
#     buildPlatform: 'x64'
#     buildConfiguration: 'Debug'
#     appxBundle: 'Never'
#     appxBuildMode: 'CI'
#     appxSigningEnabled: false
  
#   steps:
#   - task: NuGetToolInstaller@1
#     displayName: 'Use NuGet '

# # Restore the NuGet packges using Service connection for credentials
#   - task: NuGetCommand@2
#     displayName: 'NuGet restore'
#     inputs:
#       restoreSolution: $(solution)
#       feedsToUse: config
#       nugetConfigPath: src/nuget.config
#       externalFeedCredentials: TelerikFeed

#   - task: VSBuild@1
#     inputs:
#       platform: $(buildPlatform)
#       solution: $(solution)
#       configuration: $(buildConfiguration)
#       msbuildArgs: '/p:Configuration=$(buildConfiguration /p:Platform=$(buildPlatform) /p:UapAppxPackageBuildMode=$(appxBuildMode) /p:AppxPackageSigningEnabled=$(appxSigningEnabled) /p:AppxBundle=$(appxBundle)'
