# Triggers are used to determine when this pipeline is run
trigger:
  batch: true
  branches:
    include:
    - main
    exclude:
    - dev
  paths:
   include:
     - 'src/Console/**/*'
     - 'src/Web/**/*'
    

jobs:

# ************************** Job 1 - DOCUMENT PROCESSING CONSOLE APP ************************** #

- job: BuildConsoleApp
  pool:
    vmImage: 'windows-2022'

  variables:
  - group: KeyVaultVariables
  - name: consoleNugetConfigPath
    value: 'src/nuget.config'
  - name: consoleProjectPath
    value: 'src/Console/MyDocProcApp/MyDocProcApp.csproj'
  - name: buildConfiguration
    value: 'Debug'

  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '6.0.x'

  # Step 1. Restore the NuGet packges using Service connection for credentials
  - task: DotNetCoreCLI@2
    displayName: 'NuGet restore MyDocProcApp'
    inputs:
      command: 'restore'
      projects: $(consoleProjectPath)
      feedsToUse: 'config'
      nugetConfigPath: $(consoleNugetConfigPath)
      externalFeedCredentials: 'TelerikFeed'

  # Step 2. Build the project
  - task: DotNetCoreCLI@2
    displayName: 'Build MyDocProcApp'
    inputs:
      command: 'build'
      projects: $(consoleProjectPath)
      configuration: $(buildConfiguration)


# ************************** Job 2 - ASP.NET CORE BLAZOR ************************** #

- job: BuildBlazorApp
  pool:
    vmImage: 'windows-2022'

  variables:
  - group: KeyVaultVariables
  - name: nugetConfigPath
    value: 'src/nuget.config'
  - name: blazorProjectPath
    value: 'src/Console/MyDocProcApp/MyDocProcApp.csproj'
  - name: buildConfiguration
    value: 'Debug'
  - name: rid
    value: win-x86
  
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '6.0.x'
  
  # ***** Step 1. Restore NuGet packages ***** #

  # [Option 1] - dotnet nuget update source & dotnet restore, with env variables
  # This example uses Azure KeyVault secrets via the linked variable group 'KeyVaultVariables'.
  
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # Update a package source in the nuget.config with the update source command (these variables are linked Azure KeyVault secrets)
        dotnet nuget update source Telerik --source https://nuget.telerik.com/v3/index.json --username '$(MYTELERIKACCOUNTUSERNAME)' --password '$(MYTELERIKACCOUNTPASSWORD)' --store-password-in-clear-text --configfile $(nugetConfigPath)
        # Restore packages
        dotnet restore $(blazorProjectPath) --configfile $(nugetConfigPath) --runtime $(rid)


  # [Option 2] - dotnet restore, with env variables

  # - task: PowerShell@2
  #   displayName: 'Restore NuGet Packages'
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       # Copy the secret's value into the env var defined in your nuget.config.
  #       $env:TELERIK_USERNAME = '$(MY_TELERIK_EMAIL)'
  #       $env:TELERIK_PASSWORD ='$(MY_TELERIK_PASSWORD)'

  #       # Use the nuget.config to restore the packages.
  #       dotnet restore $(blazorProjectPath) --configfile $(nugetConfigPath) --runtime $(rid)


  # [Option 3]: Service connection
  # Important: make sure the pipeline has permission to use the Service connection, otherwise it will fail with a 401 Unauthorized

  # - task: DotNetCoreCLI@2
  #   displayName: 'NuGet restore MyDocProcApp'
  #   inputs:
  #     command: 'restore'
  #     projects: $(consoleProjectPath)
  #     feedsToUse: 'config'
  #     nugetConfigPath: $(consoleNugetConfigPath)
  #     externalFeedCredentials: 'TelerikFeed' 

  # ***** Step 2. Build the project ***** #

  - task: DotNetCoreCLI@2
    displayName: 'Build Blazor Project'
    inputs:
      command: 'build'
      projects: $(blazorProjectPath)
      configuration: $(buildConfiguration)
