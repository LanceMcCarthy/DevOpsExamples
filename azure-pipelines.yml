trigger:
  branches:
    include:
    - main
  paths:
   include:
     - 'azure-pipelines.yml'
     - 'src/Kendo/angular_demo/**/*'
     - 'src/Console/**/*'
     - 'src/Ajax/**/*'
     - 'src/Blazor/**/*'
     - 'src/AspNetCore/**/*'

variables:
  DOTNET_SDK_VERSION: '9.0.x'
  buildConfiguration: 'Release'
  nugetConfigPath: 'src/NuGet.Config'
  consoleProjectPath: 'src/Console/MyDocProcApp/MyDocProcApp.csproj'
  ajaxProjectPath: 'src/Ajax/MySite.sln'
  blazorProjectPath: 'src/Blazor/MyBlazorApp.sln'
  aspnetProjectPath: 'src/AspNetCore/MyAspNetCoreApp.sln'
# The following are saved as secret pipeline variables (in online AzDO editor)
# AKEYLESS_ACCESS_ID
# MY_TELERIK_NUGET_KEY
# MY_TELERIK_LICENSE_KEY

jobs:
# *************************************************************** #
# *                      KENDO ANGULAR                          * #
# *************************************************************** #
- job: BuildAngularApp
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - powershell: |
      # Move to the angular project
      cd src\Kendo\angular_demo

      # Clear the angular cache, it may hold outdated key value
      rm -rf .angular/cache

      # Just incase the project doesnt have it installed yet, add the licensing package now
      npm install --save @progress/kendo-licensing;

      # Active the license
      npx kendo-ui-license activate

      # build the project
      npm run build
    displayName: "clean angular cache"
    env:
      TELERIK_LICENSE: $(MY_TELERIK_LICENSE_KEY)  # AzDO pipeline secret variable


# *************************************************************** #
# *              CONSOLE (uses Akeyless secrets)                * #
# *************************************************************** #
- job: BuildConsoleApp1
  pool:
    vmImage: 'windows-latest'
  steps:
  # Get an authentication token from Azure so we can authenticate with Akeyless
  - task: AzureCLI@2
    name: 'AzureCLI'
    displayName: 'Get JWT from Azure Service Principal'
    inputs:
      azureSubscription: 'Azure MSA Account'
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        $JWT=$(az account get-access-token --query accessToken --output tsv)
        echo "##vso[task.setvariable variable=azure_jwt;isoutput=true;issecret=true]$JWT"
  
  # Uses LanceMcCarthy/akeyless-extension-azdo to pull down static secret (also works for dynamic secrets)
  # Needs a JWT see https://github.com/LanceMcCarthy/akeyless-extension-azdo/blob/main/docs/getting-started.md
  - task: akeyless-secrets@1
    name: 'Akeyless1'
    displayName: 'Get Secrets from Akeyless'
    inputs:
      accessid: '$(AKEYLESS_ACCESS_ID)' # Stored as pipeline variable
      azureJwt: '$(AzureCLI.azure_jwt)' # Output variable fomr the previous step
      staticSecrets: '{"/personal-keys/mccarthy/TELERIK_NUGET_KEY":"NUGET_KEY"}'

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_SDK_VERSION)

  - powershell: dotnet nuget update source 'Telerik_v3_Feed' --source 'https://nuget.telerik.com/v3/index.json' --username 'api-key' --password '$(Akeyless1.NUGET_KEY)' --configfile $(nugetConfigPath) --store-password-in-clear-text
    displayName: 'Update package source credentials'
  
  - powershell: dotnet restore $(consoleProjectPath) --configfile $(nugetConfigPath)
    displayName: 'restore packages'
  
  - powershell: dotnet publish $(consoleProjectPath) -o /app/publish /p:UseAppHost=false --no-restore
    displayName: 'Publish the project'
    env:
      TELERIK_LICENSE: $(MY_TELERIK_LICENSE_KEY) # AzDO pipeline secret variable


# *************************************************************** #
# *              CONSOLE (uses Service connection)              * #
# *************************************************************** #
- job: BuildConsoleApp2
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_SDK_VERSION)

  # Using Service connection for credentials
  - task: DotNetCoreCLI@2
    displayName: 'NuGet restore MyDocProcApp'
    inputs:
      command: 'restore'
      projects: $(consoleProjectPath)
      feedsToUse: 'config'
      nugetConfigPath: $(nugetConfigPath)
      externalFeedCredentials: 'Telerik_v3'

  # Build the project
  - task: DotNetCoreCLI@2
    displayName: 'Build MyDocProcApp'
    inputs:
      command: 'build'
      projects: $(consoleProjectPath)
      configuration: $(buildConfiguration)
    env:
      TELERIK_LICENSE: $(MY_TELERIK_LICENSE_KEY) # AzDO pipeline secret variable


# ************************************************************* #
# *                         BLAZOR                            * #
# ************************************************************* #
- job: BuildBlazorApp
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_SDK_VERSION)

  - powershell: dotnet nuget update source 'Telerik_v3_Feed' -s 'https://nuget.telerik.com/v3/index.json' -u 'api-key' -p '$(MY_TELERIK_NUGET_KEY)' --store-password-in-clear-text --configfile $(nugetConfigPath)
    displayName: 'Update Package Source Credentials'

  - powershell: dotnet restore $(blazorProjectPath) --configfile $(nugetConfigPath)
    displayName: 'Restore NuGet Packages'

  - powershell: dotnet build $(blazorProjectPath) --no-restore
    displayName: 'Build and publish'
    env:
      TELERIK_LICENSE: $(MY_TELERIK_LICENSE_KEY) # AzDO pipeline secret variable
 

# ************************************************************* #
# *                       ASPNET Core                         * #
# ************************************************************* #
- job: BuildAspNetCoreApp
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_SDK_VERSION)

  - powershell: dotnet nuget update source 'Telerik_v3_Feed' -s 'https://nuget.telerik.com/v3/index.json' -u 'api-key' -p '$(MY_TELERIK_NUGET_KEY)' --store-password-in-clear-text --configfile $(nugetConfigPath)
    displayName: 'Update Package Source Credentials'

  - powershell: dotnet restore $(aspnetProjectPath) --configfile $(nugetConfigPath)
    displayName: 'Restore NuGet Packages'
    
  - powershell: dotnet build $(aspnetProjectPath) --no-restore
    displayName: 'Build the project'
    env:
      TELERIK_LICENSE: $(MY_TELERIK_LICENSE_KEY) # AzDO pipeline secret variable


# *************************************************************** #
# *                ASP.NET AJAX (.NET Framework)                * #
# *************************************************************** #
- job: BuildWebformsApp
  pool:
    vmImage: 'windows-latest'
  steps:
  # Secure File Example!
  # A) Download the license key file from your Secure Files library.
  - task: DownloadSecureFile@1
    name: licenseKeyFile
    displayName: 'Download Telerik License Key File'
    inputs:
      secureFile: 'telerik-license.txt'

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet.exe'
    inputs:
      versionSpec: '4.x'

  # Use nuget.exe in powershell to update the credentials of the 'Telerik_v3_Feed' source defined in the nuget.config
  - task: PowerShell@2
    displayName: 'Set Package Source Credentials'
    inputs:
      targetType: 'inline'
      script: nuget sources update -Name 'Telerik_v3_Feed' -Source 'https://nuget.telerik.com/v3/index.json' -Username 'api-key' -Password '$(MY_TELERIK_NUGET_KEY)' -ConfigFile '$(nugetConfigPath)' -StorePasswordInClearText

  # Using nuget.exe Task, restore the NuGet packages
  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      restoreSolution: $(ajaxProjectPath)
      feedsToUse: config
      nugetConfigPath: $(nugetConfigPath)
      externalFeedCredentials: 'Telerik_v3'

  # Build the project without restoring packages automatically
  - task: MSBuild@1
    displayName: 'Build AJAX Project'
    inputs:
      solution: '$(ajaxProjectPath)'
      platform: Any CPU
      configuration: Release
      msbuildArguments: '/p:RestorePackages=false'
