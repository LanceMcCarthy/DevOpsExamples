trigger:
  batch: true
  branches:
    include:
    - main
  paths:
   include:
     - 'azure-pipelines.yml'
     - 'src/Ajax/**/*'
     - 'src/Blazor/**/*'
     - 'src/Console/**/*'
     - 'src/Uwp/**/*'

jobs:

# *************************************************************** #
# *                EXAMPLE 1 - CONSOLE (.NET)                 * #
# *************************************************************** #

- job: BuildConsoleApp
  pool:
    vmImage: 'windows-2022'

  variables:
  - group: KeyVaultVariables
  - name: consoleNugetConfigPath
    value: 'src/nuget.config'
  - name: consoleProjectPath
    value: 'src/Console/MyDocProcApp/MyDocProcApp.csproj'
  - name: buildConfiguration
    value: 'Debug'

  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '7.0.x'

  # Restore the NuGet packges using Service connection for credentials
  - task: DotNetCoreCLI@2
    displayName: 'NuGet restore MyDocProcApp'
    inputs:
      command: 'restore'
      projects: $(consoleProjectPath)
      feedsToUse: 'config'
      nugetConfigPath: $(consoleNugetConfigPath)
      externalFeedCredentials: 'TelerikFeed'

  # Build the project
  - task: DotNetCoreCLI@2
    displayName: 'Build MyDocProcApp'
    inputs:
      command: 'build'
      projects: $(consoleProjectPath)
      configuration: $(buildConfiguration)


# *************************************************************** #
# *         EXAMPLE 2 - ASP.NET AJAX (.NET Framework)           * #
# *************************************************************** #
- job: BuildWebformsApp
  pool:
    vmImage: 'windows-2022'

  steps:
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet '

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      restoreSolution: 'src\Ajax\MySite.sln'
      feedsToUse: config
      nugetConfigPath: src/nuget.config
      externalFeedCredentials: TelerikFeed

  - task: MSBuild@1
    displayName: 'Build solution src\Ajax\MySite.sln'
    inputs:
      solution: 'src\Ajax\MySite.sln'
      platform: Any CPU
      configuration: Release


# ******************************************************* #
# *             EXAMPLE 3 - BLAZOR (.NET 7)             * #
# ******************************************************* #
- job: BuildBlazorApp
  pool:
    vmImage: 'windows-2022'

  variables:
# secrets from AzureKeyValue
  - group: KeyVaultVariables
  
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '7.0.x'
  
  # Step 1. Restore NuGet packages: Below are two different ways to do a restore using Telerik NuGet feed

  # --------------------------------------------------
  # Option 1 - Use 'dotnet nuget update source'
  # --------------------------------------------------
  # This example uses Azure KeyVault secrets via the linked variable group 'KeyVaultVariables'.
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # Update a package source in the nuget.config with the update source command (these variables are linked Azure KeyVault secrets)
        dotnet nuget update source 'Telerik_Feed' --source 'https://nuget.telerik.com/v3/index.json' --username '$(MYTELERIKACCOUNTUSERNAME)' --password '$(MYTELERIKACCOUNTPASSWORD)' --store-password-in-clear-text --configfile 'src\Blazor\MyBlazorApp\NuGet.Config'
        # Restore packages
        dotnet restore 'src\Blazor\MyBlazorApp\MyBlazorApp.csproj' --configfile 'src\Blazor\MyBlazorApp\NuGet.Config' --runtime win-x64

  # --------------------------------------------------
  # Option 2 - Use 'dotnet restore' with env variables
  # --------------------------------------------------
  # - task: PowerShell@2
  #   displayName: 'Restore NuGet Packages'
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       # Copy the secret's value into the env var defined in your nuget.config.
  #       $env:TELERIK_USERNAME = '$(MY_TELERIK_EMAIL)'
  #       $env:TELERIK_PASSWORD ='$(MY_TELERIK_PASSWORD)'

  #       # Use the nuget.config to restore the packages.
  #       dotnet restore 'src\Blazor\MyBlazorApp\MyBlazorApp.csproj' --configfile 'src\Blazor\MyBlazorApp\NuGet.Config' --runtime win-x64 --no-self-contained


  # Step 2. Build the project
  - task: DotNetCoreCLI@2
    displayName: 'Build Blazor Project'
    inputs:
      command: 'build'
      projects: src\Blazor\MyBlazorApp\MyBlazorApp.csproj
      configuration: Debug


# ******************************************************* #
# *               EXAMPLE 4 - UWP (WinRT)               * #
# ******************************************************* #
- job: BuildUwpApp
  pool:
    vmImage: 'windows-2022'
  
  variables:
    solution: 'src/Uwp/SalesDashboard.UWP.sln'
    buildPlatform: 'x64'
    buildConfiguration: 'Debug'
    appxBundle: 'Never'
    appxBuildMode: 'CI'
    appxSigningEnabled: false
  
  steps:
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet '

# Restore the NuGet packges using Service connection for credentials
  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      restoreSolution: $(solution)
      feedsToUse: config
      nugetConfigPath: src/nuget.config
      externalFeedCredentials: TelerikFeed

  - task: VSBuild@1
    inputs:
      platform: $(buildPlatform)
      solution: $(solution)
      configuration: $(buildConfiguration)
      msbuildArgs: '/p:Configuration=$(buildConfiguration /p:Platform=$(buildPlatform) /p:UapAppxPackageBuildMode=$(appxBuildMode) /p:AppxPackageSigningEnabled=$(appxSigningEnabled) /p:AppxBundle=$(appxBundle)'
